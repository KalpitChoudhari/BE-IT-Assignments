# -*- coding: utf-8 -*-
"""KMeans Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KJONZ18OoEGTlNEU0u32Nj-VZly6479I
"""

# Import Libraries
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
from sklearn import datasets

#Load Dataset
iris = datasets.load_iris()

# Analyse dataset
iris.DESCR

iris.data[:10]

iris.target

# Create dataframe
df = pd.DataFrame({'x':iris.data[:,0], 'y':iris.data[:,1], 'cluster':iris.target})

df

# Plot the data points
plt.scatter(df["x"], df["y"], c=iris.target)
plt.xlabel("Sepal Length")
plt.ylabel("Sepal Width")
plt.show()

# Choose k (=3) random centroids
df0 = df.sample(n=3)
df0

centroid = {}

for i in range(3):
    res = []
    res.append(df0.iloc[i].x)
    res.append(df0.iloc[i].y)
    centroid[i] = res

centerPts = {0:'r',1:'g',2:'y'}

plt.scatter(df["x"], df["y"], c=iris.target, alpha=0.3)

for i in range(3):
    plt.scatter(centroid[i][0], centroid[i][1], color=centerPts[i], s=75, edgecolors="black")
    
plt.xlabel("Sepal Length")
plt.ylabel("Sepal Width")
plt.show()

# Calculate closest points to centroids and assign new cluster
def assignment(df, centroid):
    for i in range(3):
        df['dist_cluster{}'.format(i)] = (np.sqrt((df['x'] - centroid[i][0]) ** 2 + (df['y'] - centroid[i][1]) ** 2))
        
    centroid_distance_cols = ['dist_cluster{}'.format(i) for i in centroid.keys()]
    df['closest'] = df.loc[:, centroid_distance_cols].idxmin(axis=1)
    df['closest'] = df['closest'].map(lambda x: int(x.lstrip('dist_cluster{}')))
    df['color'] = df['closest'].map(lambda x: centerPts[x])
    
    return df

df = assignment(df, centroid)
df
# Calculate new centroids
def updateCentroid():
    for i in range(3):
        centroid[i][0] = df.loc[df["closest"]==i]["x"].mean()
        centroid[i][1] = df.loc[df["closest"]==i]["y"].mean()

plt.scatter(df['x'], df['y'], color=df["color"], alpha=0.3)

for i in centroid.keys():
    plt.scatter(centroid[i][0], centroid[i][1], color=centerPts[i], s=75, edgecolors="k")
    
plt.xlabel("Sepal Length")
plt.ylabel("Sepal Width")
plt.show()

# Continue until all assigned clusters do not change
while True:
    closest_centroids = df['closest'].copy(deep=True)
    updateCentroid()
    df = assignment(df, centroid)
    if closest_centroids.equals(df['closest']):
        break

plt.scatter(df['x'], df['y'], color=df["color"], alpha=0.3)

for i in centroid.keys():
    plt.scatter(centroid[i][0], centroid[i][1],color=centerPts[i], s=75, edgecolors="k")
    
plt.xlabel("Sepal Length")
plt.ylabel("Sepal Width")
plt.show()

